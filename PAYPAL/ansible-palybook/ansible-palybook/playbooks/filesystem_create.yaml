---
- name: Create Filesystem for Servers
  hosts: all
  become: true
  vars_files:
    - "../vars/{{ env }}/filesystem_vars.yaml"

  tasks:
    - name: Ensure lvm2 is installed
      ansible.builtin.package:
        name: lvm2
        state: present

    - name: Get disk information
      ansible.builtin.shell: "ls -ll /dev/disk/by-id/google-{{ item.disk_id }} | awk '{print $NF}' | awk -F '/' '{print $NF}'"
      register: disk_info
      loop: "{{ lvm_configs }}"

    - name: Build VG-to-Disk mapping
      set_fact:
        vg_disk_map: "{{ vg_disk_map | default({}) | combine({ item.item.vg_name: '/dev/' + item.stdout }) }}"
      loop: "{{ disk_info.results }}"

    - name: Get existing PVs
      ansible.builtin.command: "pvs --noheadings -o pv_name"
      register: existing_pvs
      changed_when: false
      failed_when: false

    - name: Create physical volumes if not exist
      ansible.builtin.command:
        cmd: "pvcreate /dev/{{ item.stdout }}"
      loop: "{{ disk_info.results }}"
      when: "'/dev/' + item.stdout not in existing_pvs.stdout"
      register: pvcreate_results
      changed_when: "'/dev/' + item.stdout not in existing_pvs.stdout"

    - name: Get existing VGs
      ansible.builtin.command: "vgs --noheadings -o vg_name"
      register: existing_vgs
      changed_when: false
      failed_when: false

    - name: Create volume groups if not exist
      ansible.builtin.command:
        cmd: "vgcreate {{ item.key }} {{ item.value }}"
      loop: "{{ vg_disk_map | dict2items }}"
      when: "item.key not in existing_vgs.stdout"
      register: vgcreate_results
      changed_when: "item.key not in existing_vgs.stdout"

    - name: Wait briefly for LVM metadata to settle
      ansible.builtin.pause:
        seconds: 2

    - name: Create logical volumes if not exist
      ansible.builtin.shell: |
        if ! lvs --noheadings -o lv_name {{ item.vg_name }} | grep -qw {{ item.lv_name }}; then
          lvcreate -L {{ item.size | default('100%FREE') }} -n {{ item.lv_name }} {{ item.vg_name }}
        fi
      loop: "{{ lvm_configs }}"
      changed_when: false

    - name: Ensure mountpoint directories exist
      ansible.builtin.file:
        path: "{{ item.mount_dir }}"
        state: directory
        mode: '0777'
      loop: "{{ lvm_configs }}"

    - name: Create filesystem only if not formatted
      ansible.builtin.shell: |
        if ! blkid /dev/{{ item.vg_name }}/{{ item.lv_name }}; then
          mkfs.{{ item.fs_type | default('xfs') }} /dev/{{ item.vg_name }}/{{ item.lv_name }}
        fi
      loop: "{{ lvm_configs }}"
      changed_when: false

    - name: Mount filesystems
      ansible.builtin.mount:
        path: "{{ item.mount_dir }}"
        src: "/dev/{{ item.vg_name }}/{{ item.lv_name }}"
        fstype: "{{ item.fs_type | default('xfs') }}"
        state: mounted
      loop: "{{ lvm_configs }}"
